services:

## Récupération des données
  cloudbeaver:
    image: dbeaver/cloudbeaver:latest
    container_name: dbeaver
    restart: always
    ports:
     - ${DBEAVER_S_PORT}:${DBEAVER_S_PORT}
    volumes:
     - cloudbeaver:/opt/cloudbeaver/workspace
    networks:
     - datalake

  kyuubi:
    image: apache/kyuubi:1.7.0
    container_name: kyuubi
    depends_on:
      - spark-master
    ports:
      - ${KYUUBI_S_PORT}:${KYUUBI_D_PORT}
    environment:
      - SPARK_MASTER=spark://spark-master:${SPARK_M_S_PORT_COMM}
      - KYUUBI_ENGINE_SHARE_LEVEL=CONNECTION
    volumes:
      - ./kyuubi/kyuubi.conf:/opt/kyuubi/conf/kyuubi.conf
    command: ["/opt/kyuubi/bin/kyuubi", "start"]
    networks:
     - datalake

## Traitement des données
  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - ${SPARK_M_S_PORT_WEB}:${SPARK_M_D_PORT_WEB}
      - ${SPARK_M_S_PORT_COMM}:${SPARK_M_D_PORT_COMM}
    networks:
     - datalake

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:${SPARK_M_S_PORT_COMM}
    ports:
      - ${SPARK_W_S_PORT}:${SPARK_W_D_PORT}
    networks:
     - datalake

## Stockage des métadonnées
  postgres:
    image: postgres:latest
    container_name: postgres-metastore
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    ports:
      - ${PG_S_PORT}:${PG_D_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
     - datalake

## Stockage des données
  minio:
    image: minio/minio
    container_name: minio
    command: server /data
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    ports:
      - ${MINIO_S_PORT}:${MINIO_D_PORT}
    volumes:
      - minio_data:/data
    restart: always
    networks:
     - datalake

## Trino pour formater les données avant stockage MinIO
  trino:
    image: trinodb/trino
    container_name: trino
    depends_on:
      - minio
    ports:
      - ${TRINO_S_PORT}:${TRINO_D_PORT}
    volumes:
      - ./config/trino:/etc/trino
    networks:
     - datalake

## Récolte & visualisation Métadonnées (PostgreSQL) - Accès admin
  fastapi-postgres:
    build: ./builds/fastapi-postgres
    container_name: fastapi-postgres
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://${PG_USER}:${PG_PASSWORD}@postgres:${PG_S_PORT}/${PG_DB}
    ports:
      - ${FASTAPI_PG_S_PORT}:${FASTAPI_PG_D_PORT}
    restart: always
    networks:
     - datalake

  htmx-postgres:
    build: ./builds/htmx-postgres
    container_name: htmx-postgres
    depends_on:
      - fastapi-postgres
    ports:
      - ${HTMX_PG_S_PORT}:${HTMX_PG_D_PORT}
    restart: always
    networks:
     - datalake

## Récolte & visualisation données (MinIO) - Accès ouvert
  fastapi-minio:
    build: ./builds/fastapi-minio
    container_name: fastapi-minio
    depends_on:
      - minio
      - superset
    environment:
      - MINIO_URL=http://minio:${MINIO_S_PORT}
      - SUPERSET_URL=http://superset:${SUPERSET_S_PORT}
    ports:
      - ${FASTAPI_MINIO_S_PORT}:${FASTAPI_MINIO_D_PORT}
    restart: always
    networks:
     - datalake

  superset:
    build: ./builds/superset
    container_name: superset
    depends_on:
      - minio
    environment:
      - SUPERSET_DATABASE_URL=sqlite:////app/superset.db
    ports:
      - ${SUPERSET_S_PORT}:${SUPERSET_D_PORT}
    restart: always
    networks:
     - datalake

  htmx-minio:
    build: ./builds/htmx-minio
    container_name: htmx-minio
    depends_on:
      - fastapi-minio
    ports:
      - ${HTMX_MINIO_S_PORT}:${HTMX_MINIO_D_PORT}
    restart: always
    networks:
     - datalake


networks:
  datalake:
    external: true

volumes:
  cloudbeaver:
  postgres_data:
  minio_data: